// Copyright (c) 2016, Oracle and/or its affiliates. All Rights reserved
// 
// The Universal Permissive License (UPL), Version 1.0
// 
// Subject to the condition set forth below, permission is hereby granted to any person obtaining a copy of this software,
// associated documentation and/or data (collectively the "Software"), free of charge and under any and all copyright rights in the 
// Software, and any and all patent rights owned or freely licensable by each licensor hereunder covering either (i) the unmodified 
// Software as contributed to or provided by such licensor, or (ii) the Larger Works (as defined below), to deal in both
// 
// (a) the Software, and
// (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if one is included with the Software (each a “Larger
// Work” to which the Software is contributed by such licensors),
// 
// without restriction, including without limitation the rights to copy, create derivative works of, display, perform, and 
// distribute the Software and make, use, sell, offer for sale, import, export, have made, and have sold the Software and the 
// Larger Work(s), and to sublicense the foregoing rights on either these or other terms.
// 
// This license is subject to the following condition:
// The above copyright notice and either this complete permission notice or at a minimum a reference to the UPL must be included in 
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
// IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.



// define a component with a generic type parameters N

// test generic component
.comp DiGraph<N> {

    .decl edge(a:N, b:N)
    .decl node(a:N)

    node(X) :- edge(X,_).
    node(X) :- edge(_,X).

    .decl reach(a:N,b:N)
    reach(X,Y) :- edge(X,Y).
    reach(X,Z) :- reach(X,Y), reach(Y,Z).

}

// test inheritence
.comp Graph<N> : DiGraph<N> {
    edge(X,Y) :- edge(Y,X).
}

// test composition
.comp Net<N> {

    .init G = Graph<N>

    .decl e(a:N,b:N)
    G.edge(X,Y) :- e(X,Y).

    .decl r(a:N,b:N)
    r(X,Y) :- G.reach(X,Y).
}


// instantiate with different types

// -- a simple city map --

.type city
.init StreetMap = Net<city>

StreetMap.e("A","B").
StreetMap.e("B","C").


// -- use a record as node type --

.type Person = [
    name:symbol,
    address:symbol
]

.init SocialNet = Net<Person>

#define Homer ["Homer","Evergreen Terrace 742"]
#define Ned ["Ned","Evergreen Terrace 744"]
#define Edna ["Ned","Evergreen Terrace 82"]

SocialNet.e(Homer,Ned).
SocialNet.e(Ned,Edna).


// -- print some results --

.decl result(n:symbol) output
result("Map Works") :- StreetMap.r("C","A").
result("Social Net Works") :- SocialNet.r(Edna,Homer).




