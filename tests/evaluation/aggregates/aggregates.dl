// Copyright (c) 2016, Oracle and/or its affiliates. All Rights reserved
// 
// The Universal Permissive License (UPL), Version 1.0
// 
// Subject to the condition set forth below, permission is hereby granted to any person obtaining a copy of this software,
// associated documentation and/or data (collectively the "Software"), free of charge and under any and all copyright rights in the 
// Software, and any and all patent rights owned or freely licensable by each licensor hereunder covering either (i) the unmodified 
// Software as contributed to or provided by such licensor, or (ii) the Larger Works (as defined below), to deal in both
// 
// (a) the Software, and
// (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if one is included with the Software (each a “Larger
// Work” to which the Software is contributed by such licensors),
// 
// without restriction, including without limitation the rights to copy, create derivative works of, display, perform, and 
// distribute the Software and make, use, sell, offer for sale, import, export, have made, and have sold the Software and the 
// Larger Work(s), and to sublicense the foregoing rights on either these or other terms.
// 
// This license is subject to the following condition:
// The above copyright notice and either this complete permission notice or at a minimum a reference to the UPL must be included in 
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
// IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


.decl a(n:symbol,x:number)

a("A",3).
a("A",4).
a("A",5).
a("A",6).
a("B",2).
a("B",3).
a("B",4).
a("D",4).

.decl res(n:symbol,x:number) output
res("min",Y)  :- Y = min Z : a(_,Z).
res("minA",Y) :- Y = min Z : a("A",Z).
res("minB",Y) :- Y = min Z : a("B",Z).
res("minC",Y) :- Y = min Z : a("C",Z).

res("minC2",Y)  :- Y = min Z : { a("C",Z) }.
res("minAB",Y)  :- Y = min Z : { a(A,Z), a(B,Z), A!=B }.
res("minAB+",Y) :- Y = min Z+Y : { a(A,Z), a(B,Y), A!=B }.

res("max",Y)  :- Y = max Z : a(_,Z).
res("maxA",Y) :- Y = max Z : a("A",Z).
res("maxB",Y) :- Y = max Z : a("B",Z).
res("maxC",Y) :- Y = max Z : a("C",Z).

res("maxC2",Y)  :- Y = max Z : { a("C",Z) }.
res("maxAB",Y)  :- Y = max Z : { a(A,Z), a(B,Z), A!=B }.
res("maxAB+",Y) :- Y = max Z+Y : { a(A,Z), a(B,Y), A!=B }.

res("count",Y)  :- Y = count : a(_,_).
res("countA",Y) :- Y = count : a("A",_).
res("countB",Y) :- Y = count : a("B",_).
res("countC",Y) :- Y = count : a("C",_).

res("countNotA",Y) :- Y = count : { a(X,_), X != "A" }.
res("countNotB",Y) :- Y = count : { a(X,_), X != "B" }.

.decl res1(n:symbol,x:number) output
res1(X,Y) :- a(X,_), Y = min Z : a(X,Z).

.decl res2(n:symbol,x:number,y:number) output
res2(X,Y,W) :- a(X,_), Y = min Z : a(X,Z), W = max Z : a(X,Z).

.decl res3(n:symbol,x:number) output
res3(X,Y) :- a(X,_), Y = min Z : a(X,Z), Y = max Z : a(X,Z).
