.type Integer

.decl student (a:Integer, b:Integer, c:Integer) 
.decl professor (a:Integer, b:Integer) 

.decl actual_adv(s:Integer, p:Integer)  output
.decl chosen(s:Integer, p:Integer) output
.decl diffchoice(s:Integer, p:Integer) output 


student("JimBlack", "ee", "Senior").
professor("ohm", "ee").
professor("bell", "ee").

actual_adv(s, p) :- student(s, m, _), professor(p, m), chosen(s, p).
chosen(s, p) :- student(s, m, _), professor(p, m), !diffchoice(s, p).
diffchoice(s, p) :- chosen(s, pp), p != pp, professor(p,_).


