//
// Copyright (c) 2015, Oracle and/or its affiliates. All Rights reserved
// 
// The Universal Permissive License (UPL), Version 1.0
// 
// Subject to the condition set forth below, permission is hereby granted to any person obtaining a copy of this software,
// associated documentation and/or data (collectively the "Software"), free of charge and under any and all copyright rights in the 
// Software, and any and all patent rights owned or freely licensable by each licensor hereunder covering either (i) the unmodified 
// Software as contributed to or provided by such licensor, or (ii) the Larger Works (as defined below), to deal in both
// 
// (a) the Software, and
// (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if one is included with the Software (each a “Larger
// Work” to which the Software is contributed by such licensors),
// 
// without restriction, including without limitation the rights to copy, create derivative works of, display, perform, and 
// distribute the Software and make, use, sell, offer for sale, import, export, have made, and have sold the Software and the 
// Larger Work(s), and to sublicense the foregoing rights on either these or other terms.
// 
// This license is subject to the following condition:
// The above copyright notice and either this complete permission notice or at a minimum a reference to the UPL must be included in 
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
// IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// 
// This code computes the dominance relation of a rooted directed graph
// given via its edge set. 
// 
// The dominance relation is defined as the least fixed-point of
// the following equations:
//   dom(start) := {start}
//   dom(n) := {n} \/ /\_{p in preds(n) dom(p),   for all n <> start
//
// To compute the fixed-point in Datalog, we are required to switch
// to union semantics, hence, the dual problem:
//   non-dom(start) := node-set \ {start}
//   non-dom(start) := node-set \ {n} /\ \/_{p in preds(n)}  non-dom(p), for all n <> start
//


// Additionally, this code computes the immediate dominators.
// The immediate dominator of a node n is the unique node that strictly dominates n but 
// does not strictly dominate any other node that strictly dominates n. Every node, 
// except the entry node, has an immediate dominator.
//
// Assume that {d1, ... , dk} are the dominators of node u that are ordered by 
// d1 dom d2 dom d3 ... dk dom u forming an chain. We can equally say that 
// dom(d1) ⊂ dom(d2) ⊂ dom(d3) ⊂ ... ⊂ dom(dk) ⊂ dom(u) or alternatively we can say that 
//
// |dom(d1)| < |dom(d2)| < |dom(d3)| < ... < |dom(dk)| < |dom(dk)| < |dom(u)|

// which implies that we can build the order of dominators by looking at the size of the dominance set.



.comp Dominance<N>{

      //
      // Start node (singleton)
      //
      .decl start(s:N)

      //
      // Set of edges
      //
      .decl edge(s:N,d:N)

      //
      // Set of nodes
      //
      .decl node(n:N)
      node(x) :- edge(x,_).
      node(x) :- edge(_,x).

      //
      // Non-dominance of input graph
      //  
      .decl non_dom(s:N,d:N)
      non_dom(x,y) :- start(x), node(y), x!=y. 
      non_dom(x,y) :- non_dom(z,y), edge(z,x), !start(x), x!=y .


      //
      // Dominance of input graph
      // 
      .decl dom(s:N,d:N)
      dom(x,y) :- node(x), node(y), !non_dom(x,y).

      //
      // Finds nodes that strictly dominate a node
      //
      .decl s_dom(n:N,d:N)
      s_dom(n,d) :- dom(n,d), n != d.

}


.comp ImmediateDominance<N> : Dominance<N>{
      
      //
      // Counts the size strictly dominating set
      //
      .decl s_domsize(n:N,s:number)
      s_domsize(n,0) :- start(n).
      s_domsize(n,s) :- s_dom(n,_), s = count : s_dom(n,_).
          


      //
      // Set of sizes of strictly dominating nodes
      //
      .decl s_domsizes(n:N,d:N,m:number)
      s_domsizes(n,d,s) :- s_dom(n,d), s_domsize(d,s).

      
      //
      // Max size of strictly dominating nodes. 
      //
      .decl s_max_domsize(n:N,s:number)
       s_max_domsize(n,0) :- start(n).
      s_max_domsize(n,y) :- s_domsizes(n,_,_), y = max s : s_domsizes(n,_,s).

      //
      // Immediate Dominator
      //
      .decl imdom(n:N,i:N)
      imdom(n,x) :- s_dom(n,x), s_domsize(x,s), s_max_domsize(n,s).

}

//
// The graph is taken from example 10.30 in 
// "Compilers Principles, Techniques and Tools"
// by V.Aho et al. 
//

.init ImmDom = ImmediateDominance<number>

ImmDom.edge(1, 2).
ImmDom.edge(1, 3).
ImmDom.edge(2, 3).
ImmDom.edge(4, 3).
ImmDom.edge(8, 3).
ImmDom.edge(3, 4).
ImmDom.edge(8, 4).
ImmDom.edge(4, 5).
ImmDom.edge(4, 6).
ImmDom.edge(5, 7).
ImmDom.edge(6, 7).
ImmDom.edge(10, 7).
ImmDom.edge(7, 8).
ImmDom.edge(8, 9).
ImmDom.edge(8, 10).
ImmDom.edge(9, 1).
ImmDom.start(1).


//
// Output
// 

.decl dominators(n:number,s:number) output
dominators(n,s) :- ImmDom.dom(n,s).


//
// Output
// 

.decl immediate_dom(n:number,s:number) output
immediate_dom(n,s) :- ImmDom.imdom(n,s).


