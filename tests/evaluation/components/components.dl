// Copyright (c) 2016, Oracle and/or its affiliates. All Rights reserved
// 
// The Universal Permissive License (UPL), Version 1.0
// 
// Subject to the condition set forth below, permission is hereby granted to any person obtaining a copy of this software,
// associated documentation and/or data (collectively the "Software"), free of charge and under any and all copyright rights in the 
// Software, and any and all patent rights owned or freely licensable by each licensor hereunder covering either (i) the unmodified 
// Software as contributed to or provided by such licensor, or (ii) the Larger Works (as defined below), to deal in both
// 
// (a) the Software, and
// (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if one is included with the Software (each a “Larger
// Work” to which the Software is contributed by such licensors),
// 
// without restriction, including without limitation the rights to copy, create derivative works of, display, perform, and 
// distribute the Software and make, use, sell, offer for sale, import, export, have made, and have sold the Software and the 
// Larger Work(s), and to sublicense the foregoing rights on either these or other terms.
// 
// This license is subject to the following condition:
// The above copyright notice and either this complete permission notice or at a minimum a reference to the UPL must be included in 
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
// IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


// ---- some type definitions -----

.type node


// ---------------------------------
// Example Component: Directed Graph
// ---------------------------------

.comp DiGraph {

    .decl node (n:node)             // "member" relation
    .decl edge (a:node,b:node)      // "member" relation


    // rules for node
    node(X) :- edge(X,_).
    node(X) :- edge(_,X).


    // derived properties

    .decl reachable (a:node,b:node)
    reachable(X,Y) :- edge(X,Y).
	reachable(X,Z) :- reachable(X,Y),reachable(Y,Z).

//    .decl empty ()              // 0-ary relation is a comming up feature
//	empty() :- !node(_).					

    .decl roots (n:node)
	roots(X) :- node(X), !edge(_,X).

    .decl leafs (n:node)
	leafs(X) :- node(X), !edge(X,_).

    .decl clique (a:node,b:node)
	clique(X,Y) :- reachable(X,Y), reachable(Y,X).
}

// ---------------------------------
// Example Component: Graph
// ---------------------------------

.comp Graph : DiGraph {         // components can be inherited

    edge(X,Y) :- edge(Y,X).     // and additional clauses can be added

}


// also: support nesting of modules

.comp Traffic {

    // 3 nested instances of the directed graph
	.init train = DiGraph
	.init ship = DiGraph
	.init cap = DiGraph

    // reachability is defined over all edges
    .decl reachable(a:node,b:node)
	reachable(X,Y) :- train.reachable(X,Y).
	reachable(X,Y) :- ship.reachable(X,Y).
	reachable(X,Y) :- cap.reachable(X,Y).

	reachable(X,Z) :- reachable(X,Y), reachable(Y,Z).

}


// usage: instantiation

.init SocialNet = DiGraph

SocialNet.edge("luke","leia").
SocialNet.edge("han","luke").


.init Equal = Graph

Equal.edge("5","five").
Equal.edge("5","V").


// some output
.decl result ( x : symbol ) output
result("Star Wars IV-VI happend!") :- SocialNet.reachable("han","leia").
result("Luke isn't a good buddy!") :- !SocialNet.reachable("leia","han").

result("V is five") :- Equal.reachable("V","five").
result("five is V") :- Equal.reachable("five","V").

.init London = Traffic

London.train.edge("Airport","Waterloo").
London.ship.edge("Waterloo","London Bridge").
London.cap.edge("London Bridge", "Big Ben").

result("Connected") :- London.reachable("Airport","Big Ben").


