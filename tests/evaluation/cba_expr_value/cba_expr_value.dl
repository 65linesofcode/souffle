// Copyright (c) 2016, Oracle and/or its affiliates. All Rights reserved
// 
// The Universal Permissive License (UPL), Version 1.0
// 
// Subject to the condition set forth below, permission is hereby granted to any person obtaining a copy of this software,
// associated documentation and/or data (collectively the "Software"), free of charge and under any and all copyright rights in the 
// Software, and any and all patent rights owned or freely licensable by each licensor hereunder covering either (i) the unmodified 
// Software as contributed to or provided by such licensor, or (ii) the Larger Works (as defined below), to deal in both
// 
// (a) the Software, and
// (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if one is included with the Software (each a “Larger
// Work” to which the Software is contributed by such licensors),
// 
// without restriction, including without limitation the rights to copy, create derivative works of, display, perform, and 
// distribute the Software and make, use, sell, offer for sale, import, export, have made, and have sold the Software and the 
// Larger Work(s), and to sublicense the foregoing rights on either these or other terms.
// 
// This license is subject to the following condition:
// The above copyright notice and either this complete permission notice or at a minimum a reference to the UPL must be included in 
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
// IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

//
// An example constraint-based analysis:
//
// Given the Lambda term: (\ denotes a lambda)
//
//	(\x. x 3 2) (\y.\z.z)
//
// what is its value?
//


// Step A) model the input code

.type Kind

.decl kind(k:Kind)

kind("Lit").
kind("Var").
kind("Abs").
kind("App").

// the global term register - id, kind and index in corresponding relation
.decl term( id:number, k:Kind, i:number )


.type Value

.decl lits( i:number, n:Value )

lits( 0, "3" ).
lits( 1, "2" ).

term( 0, "Lit", 0 ).
term( 1, "Lit", 1 ).


.type VarName
.decl vars( i:number, n:VarName )

vars( 0, "x" ).
vars( 1, "y" ).
vars( 2, "z" ).

term( 2, "Var", 0 ).
term( 3, "Var", 1 ).
term( 4, "Var", 2 ).


.decl abs( i:number, v:number, b:number)

abs( 0, 0, 8 ).
abs( 1, 1, 7 ).
abs( 2, 2, 4 ).

term( 5, "Abs", 0 ).
term( 6, "Abs", 1 ).
term( 7, "Abs", 2 ).


.decl app( i:number, t1:number, t2:number )

app( 0, 9, 1 ).
app( 1, 2, 0 ).
app( 2, 5, 6 ).

term( 8, "App", 0 ).
term( 9, "App", 1 ).
term(10, "App", 2 ).


////////////////////////////////////////////////////////////////////////////////////////////////////

// Step B) Analysis - get the value computed by the term


.decl data_var( i:number, v:Value ) 
.decl data_term( i:number, v:Value ) output

.decl ctrl_var( i:number, f:number ) 
.decl ctrl_term( i:number, f:number ) 


//////////// D - Data Analysis //////////////

// the value of a literal is the value it is representing
data_term( i, v ) :- term(i,"Lit",l), lits( l, v ).

// the value of a variable is the value in the variable assignment
data_term( i, v ) :- term(i,"Var",x), data_var( x, v ).

// the value of an application is the value of the body of the targeted abstraction
data_term( i, v ) :- term(i,"App",x), app(x,t1,_), ctrl_term(t1, f), abs( f, _, b), data_term( b, v ).

// the value of an abstraction is not defined

// parameter binding
data_var( i, v ) :- app( _, a, b ), ctrl_term( a, f ), abs( f, i, _), data_term( b, v).


//////////// C - Control Flow Analysis //////////////

// the value of a variable is the value in the variable assignment
ctrl_term( i, v ) :- term(i,"Var",x), ctrl_var( x, v ).

// the value of an application is the value of the body of the targeted abstraction
ctrl_term( i, v ) :- term(i,"App",x), app(x,t1,_), ctrl_term(t1, f), abs( f, _, b), ctrl_term( b, v ).

// the control flow value of an abstraction is the term itself
ctrl_term( i, v ) :- term( i, "Abs", v ).

// parameter binding
ctrl_var( i, v ) :- app( _, a, b ), ctrl_term( a, f ), abs( f, i, _), ctrl_term( b, v).

