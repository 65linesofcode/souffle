//
// Copyright (c) 2015, Oracle and/or its affiliates. All Rights reserved
// 
// The Universal Permissive License (UPL), Version 1.0
// 
// Subject to the condition set forth below, permission is hereby granted to any person obtaining a copy of this software,
// associated documentation and/or data (collectively the "Software"), free of charge and under any and all copyright rights in the 
// Software, and any and all patent rights owned or freely licensable by each licensor hereunder covering either (i) the unmodified 
// Software as contributed to or provided by such licensor, or (ii) the Larger Works (as defined below), to deal in both
// 
// (a) the Software, and
// (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if one is included with the Software (each a “Larger
// Work” to which the Software is contributed by such licensors),
// 
// without restriction, including without limitation the rights to copy, create derivative works of, display, perform, and 
// distribute the Software and make, use, sell, offer for sale, import, export, have made, and have sold the Software and the 
// Larger Work(s), and to sublicense the foregoing rights on either these or other terms.
// 
// This license is subject to the following condition:
// The above copyright notice and either this complete permission notice or at a minimum a reference to the UPL must be included in 
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
// IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 and/or its affiliates.
//
// All rights reserved.
//

// This program is a Datalog implementation of IFDS

.type String
.type Integer

.type Procedure = String
.type Node = String
.type DataFlowFact = String

.decl Node(n:Node) input output
.decl Procedure(p:Procedure) input output
.decl DataFlowFact(f:DataFlowFact) input output

//EDB relations

//Node n is the start node of procedure p
.decl StartNode(n:Node, p:Procedure) input output

//Node n is the return node of procedure p
.decl ReturnNode(n:Node, p:Procedure) input output

//Node n is a call node in procedure p
.decl CallNode(n:Node, p:Procedure) input output

//Map a call node m to its after-return node n
.decl ReturnSite(m:Node, n:Node) input output

//Map a node to its enclosing procedure
.decl ProcOf(n:Node, p:Procedure) input output

//Map a call node to its callee
.decl CalledProc(n:Node, p:Procedure) input output

//Data-flow functions in the form of ((m, d1) -> (n,d2))
.decl FlowEdge(m:Node, d1:DataFlowFact, n:Node, d2:DataFlowFact) input output

//IDB relations

//Summary data-flow edges in the form of ((m, d1) -> (n, d2))
.decl SummaryEdge(m:Node, d1:DataFlowFact, n:Node, d2:DataFlowFact) output

//PathEdge between two nodes
.decl PathEdge(m:Node, d1:DataFlowFact, n:Node, d2:DataFlowFact) output

//Initialisation
PathEdge("s_main", "0", "s_main", "0").

//Case n in Call_p
PathEdge(sq, d3, sq, d3) :- ProcOf(n, p),
                            CallNode(n, p),
						    StartNode(s, p),
						    PathEdge(s, d1, n, d2),
                            CalledProc(n, q),
                            StartNode(sq, q),
                            FlowEdge(n, d2, sq, d3).

PathEdge(s, d1, r, d3) :- ProcOf(n, p),
                          CallNode(n, p),
                          FlowEdge(n, d2, r, d3),
                          ReturnSite(n, r),
                          StartNode(s, p),
                          PathEdge(s, d1, n, d2).

PathEdge(s, d1, r, d3) :- ProcOf(n, p),
                          CallNode(n, p),
                          SummaryEdge(n, d2, r, d3),
                          ReturnSite(n, r),
                          StartNode(s, p),
                          PathEdge(s, d1, n, d2).
           
//Case n equals e_p
SummaryEdge(c, d4, r, d5) :- ReturnNode(n, p),
                             CalledProc(c, p),
                             StartNode(s, p),
                             PathEdge(s, d1, n, d2),
                             FlowEdge(c, d4, s, d1),
                             ReturnSite(c, r),
                             FlowEdge(n, d2, r, d5).

PathEdge(sq, d3, r, d5) :- ReturnNode(n, p),
                           CalledProc(c, p),
                           StartNode(s, p),
                           PathEdge(s, d1, n, d2),
                           FlowEdge(c, d4, s, d1),
                           ReturnSite(c, r),
                           FlowEdge(n, d2, r, d5),
                           SummaryEdge(c, d4, r, d5),
                           ProcOf(c, q),
                           StartNode(sq, q),
                           PathEdge(sq, d3, c, d4).

//Case n in (N_p - Call_p - e_p)
PathEdge(s, d1, m, d3) :- FlowEdge(n, d2, m, d3),
                          ProcOf(n, p),
                          !ReturnNode(n, p),
                          !CallNode(n, p),
                          StartNode(s, p),
                          PathEdge(s, d1, n, d2).

